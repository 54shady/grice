# /etc/skel/.bashrc
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# Put your fun stuff here.
# .bashrc

# User specific aliases and functions
alias rm='rm -rvf'
alias ll='ls -laF'
alias cp='cp -rf'
alias mv='mv -i'
alias vd='vimdiff -S ~/.vim/colors/simplifysimplify-dark.vim'
alias vi='vim'
alias g='vim -t'

# alias for toggle mouse left/right button
# xev to checkout mouse button(or "xmodmap -pp")
alias ml="xmodmap -e 'pointer = 3 2 1'"
alias mr="xmodmap -e 'pointer = 1 2 3'"

alias gp='grep --colour=auto --exclude=tags --exclude-dir=*.git --exclude=*.swp'
alias tm='tmux attach-session -t zeroway'
alias minicom='sudo minicom'
alias man='viman'

alias ipad='ip -br -4 ad'
alias psx='ps aux'

# custome alias
if [ -f ~/.grice/dotfile/alicst ]; then
	. ~/.grice/dotfile/alicst
fi

# custome path
if [ -f ~/.grice/dotfile/cpath ]; then
	. ~/.grice/dotfile/cpath
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

#source /etc/bash_completion.d/git-completion.bash

#git branch show in the shell prompt
find_git_branch () {
	local dir=. head

	until [ "$dir" -ef / ]; do
		if [ -f "$dir/.git/HEAD" ]; then
			head=$(< "$dir/.git/HEAD")

			if [[ $head = ref:\ refs/heads/* ]]; then
				git_branch=" (${head#*/*/})"
			elif [[ $head != '' ]]; then
				git_branch=" ((detached))"
			else
				git_branch=" ((unknow))"
			fi

			return
		fi

		dir="../$dir"
	done

	git_branch=''

	# other prompt command
	history -a
}

PROMPT_COMMAND="find_git_branch"

# Here is bash color codes you can use
black=$'\[\e[1;30m\]'
red=$'\[\e[1;31m\]'
green=$'\[\e[1;32m\]'
yellow=$'\[\e[1;33m\]'
blue=$'\[\e[1;34m\]'
magenta=$'\[\e[1;35m\]'
cyan=$'\[\e[1;36m\]'
white=$'\[\e[1;37m\]'
normal=$'\[\e[m\]'

# Configure PS1, we now only using dwm as defalt WM
if [ "$(pgrep -x dwm | wc -l)" -gt 0 ]
then
	PS1="$red[\W$yellow\$git_branch$red]$ $normal"
else
	PS1="$red[`/sbin/ifconfig enp1s0 | sed -nr 's/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'` \W$yellow\$git_branch$red]# $normal"
fi

complete -cf sudo

# make normal user can excute the sbin tools
export PATH=$PATH:/sbin:/usr/sbin

# global variables
export EDITOR=/usr/bin/vim
export TERMINAL=/usr/bin/st
export LANG="en_US.UTF-8"
export BROWSER=/usr/bin/qutebrowser

# for record audio and video icon display
export STATUSBAR="i3blocks"
export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=xim
export GTK_IM_MODULE=xim

# auto run tmux when launch the shell
# do not confilct with the tty1 when login
auto_run_tumx()
{
    if [[ -z "$TMUX" && $(tty) == /dev/pts/0 ]] ;then
        ID="`tmux ls | grep -vm1 attached | cut -d: -f1`" # get the id of a deattached session
        if [[ -z "$ID" ]] ;then # open session with default config
            tmux attach-session
        else
            tmux attach-session -t "$ID" # if available attach to it
        fi
    fi
}
if ! type tmux >/dev/null 2>&1  ;then echo > /dev/null ; else auto_run_tumx; fi

# history settings
export HISTCONTROL=ignoredups
export HISTCONTROL=erasedups
export HISTSIZE=100000
export HISTFILESIZE=20000
shopt -s histappend
